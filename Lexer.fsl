{
module Lexer
open System
open System.Text
open System.Text.RegularExpressions
open Parser
open Zorx
open Microsoft.FSharp.Text.Lexing

let loggingEnabled = false
let lexerLogger msg = 
  Zorx.Logging.logger loggingEnabled msg

let keyword s =
    match s with
    | "module"       -> MODULE
    | "controller"   -> FSM
    | "datapath"     -> DATAPATH
    | "in"        -> INPORT
    | "out"       -> OUTPORT
    | "reg"       -> REG
    | "true"         -> TRUE
    | "false"        -> FALSE
    | "status"       -> STATUSSIGNAL
    | "if"           -> IF
    | "int"          -> INTEGER
    | "bool"         -> BOOLEAN
    | _              -> NAME s
}

// These are some regular expression definitions
let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let char = ['A'-'Z' 'a'-'z']
let int = digit+
let identifier  = char(char|digit|['_'])*
let quote                 = '\"'
let StringConst           = quote ([^'\"'])* quote
let commentStart = "//"
let comment = "//" ([^ '\n' ]*|[^ '\r' '\n' ]*)


rule tokenize = parse
  | whitespace  { tokenize lexbuf }
  | newline     { 
    lexbuf.EndPos <- lexbuf.EndPos.NextLine;
    tokenize lexbuf 
  }
  | comment     { 
    lexerLogger (sprintf "Read comment: %s " Encoding.UTF8.GetString(lexbuf.Lexeme))
    lexbuf.EndPos <- lexbuf.EndPos.NextLine;
    tokenize lexbuf
   }
  | int         { lexerLogger "Lexer read int"; INT<| Int32.Parse(Encoding.UTF8.GetString(lexbuf.Lexeme)) }
  | "("         { lexerLogger "Lexer read LP"; LP }
  | ")"         { lexerLogger "Lexer read LP"; RP }
  | "{"         { lexerLogger "Lexer read LCP"; LCP }
  | "}"         { lexerLogger "Lexer read RCP"; RCP }
  | "["         { LSP }
  | "]"         { RSP }
  | ","         { lexerLogger "Lexer read COMMA"; COMMA }
  | ":"         { lexerLogger "Lexer read COLON"; COLON }
  | "!="        { NEQ }
  | "=="        { EQ }
  | "&&"        { AND }
  | "!"         { NOT }
  | "||"        { OR }
  | ":="        { ASSIGN }
  | ">"         { lexerLogger "Lexer read GEQ"; GT }
  | "<"         { lexerLogger "Lexer read LEQ"; LT }
  | "-"         { lexerLogger "Lexer read MINUS"; MINUS }
  | "+"         { lexerLogger "Lexer read PLUS"; PLUS }
  | ";"         { lexerLogger "Lexer read SEMICOLON"; SEMICOLON }
  // | comment     { tokenize lexbuf }
  | identifier  { lexerLogger (sprintf "Lexer read keyword:  %A" keyword(Encoding.UTF8.GetString(lexbuf.Lexeme)))
                  keyword(Encoding.UTF8.GetString(lexbuf.Lexeme)) }
  | eof         { lexerLogger "Lexer read eof"; EOF }

