%{
   open Zorx.Frontend.AST
   open Zorx

   let loggingEnabled = false
   let logger msg = Zorx.Logging.logger loggingEnabled msg
%}

%start start
%token <int> INT
%token <string> NAME
%token MODULE INPORT OUTPORT REG STATUSSIGNAL FSM DATAPATH
%token LCP RCP LP RP LSP RSP EOF COMMA COLON SEMICOLON DASH ASSIGN
%token PLUS MINUS
%token NEQ EQ LEQ GEQ LT GT INTEGER BOOLEAN NOT
%token AND OR 
%token TRUE FALSE IF

%left AND OR
%left EQ NEQ LEQ GEQ LT GT
%left NOT
%left PLUS MINUS

%type <Specification> start
%type <Module list> ModList ModuleL


%%

start: Specification EOF          { S($1) }

Specification:
    | ModuleL            { $1 }

ModuleL:
    |                       { [] }
    | ModList               { $1 }

ModList:
    | Module                { [$1] }
    | Module ModList        { $1 :: $2}

Module:
    // | MODULE NAME LCP DecL SEMICOLON StmtL RCP     { M($4, $6, []) }
    | MODULE NAME LP DecL RP LP DecL RP LCP Datapath Controller RCP 
        {
            let mControllerDecls = $4
            let mDpDecls = $7
            printfn "%A" mControllerDecls
            let (Controller (controllerDecls, transitions)) = $11
            let (Datapath (dpDecls, actions)) = $10
            let controller = Controller (controllerDecls @ mControllerDecls, transitions)
            let dp = Datapath (dpDecls @ mDpDecls, actions)
            M ($2, controller, dp)
        }
    | MODULE NAME LCP Datapath Controller RCP     { M ($2, $5, $4) }

DecL:
    |                               { [] }
    | DecList                       { $1 }

DecList:
    | Dec                           { [$1] }
    | Dec COMMA DecList             { $1 :: $3}

StmtL:
    |                               { [] }
    | StmtList                      { $1 }

StmtList:
    | Stmt                          { [$1] }
    | Stmt SEMICOLON                { [$1] } // Allow semicolon for single stmts.
    | Stmt SEMICOLON StmtList       { $1 :: $3 }


Stmt:
    | NAME ASSIGN Expr               { Ass($1, $3) }

Access:
    | NAME                           { AVar($1) } 

Expr:
    | Access                         { Access($1) }
    | LP Expr RP                     { $2 }
    | TRUE                           { C (B true) }
    | FALSE                          { C (B false) }
    | INT                            { C (N ($1)) }
    | Expr PLUS Expr                 { BExp($1,Plus,$3) }
    | Expr EQ Expr                   { BExp($1,Eq,$3) }
    | Expr NEQ Expr                  { BExp($1,Neq,$3) }
    | Expr AND Expr                  { BExp($1,And,$3) }
    | Expr OR Expr                   { BExp($1,Or,$3) }
    | Expr LT Expr                   { BExp($1,Lt,$3) }
    | Expr GT Expr                   { BExp($1,Gt,$3) }
    | Expr MINUS Expr                { BExp($1,Minus,$3) }
    | NOT Expr                       { UExp($2, Not)}

Controller:
    | FSM LCP DecL SEMICOLON TransitionL RCP       { Controller($3, $5) }
    | FSM LCP TransitionL RCP       { Controller([], $3) }

ActionL:
    |                               { [] }
    | ActionList                    { $1 }

ActionList:
    | Action                        { [$1] }
    | Action COMMA ActionList       { $1 :: $3 }

Action:
    | NAME LCP StmtL RCP             { logger "Parsed Action"; Action($1, $3) }
    
Datapath:
    | DATAPATH LCP DecL SEMICOLON ActionL RCP      { Datapath($3, $5)}

TransitionL:
    |                                     { [] }
    | TransitionList                      { $1 }

TransitionList:
    | Transition                          { [$1] }
    | Transition COMMA TransitionList     { $1 :: $3 }

Transition:
    | NAME LSP Expr RSP LP ActionNameList RP LSP StmtL RSP GT NAME { T($1, $3, $6, $12, $9) }
    | NAME LSP Expr RSP LP ActionNameList RP GT NAME { T($1, $3, $6, $9, []) }

ActionNameL:
    |                               { [] }
    | ActionNameList                { $1 }

ActionNameList:
    | NAME                          { [$1] }     
    | NAME COMMA ActionNameList     {  $1 :: $3 }

Dec:
    | NAME COLON PrimTyp Typ                { Dec($1, $4, $3)}

PrimTyp:
    | INTEGER                    { Integer }
    | BOOLEAN                    { Boolean }

Typ:
    | INPORT                     { InPort }
    | STATUSSIGNAL               { StatusSignal }
    | OUTPORT                    { OutPort }
    | REG                        { Reg }
